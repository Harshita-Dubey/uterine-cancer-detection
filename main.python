import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Load the dataset
df = pd.read_csv("/content/Uterine Corpus Endometrial Carcinoma (1).csv")  # Replace with actual file name

# Drop unnecessary columns
df.drop(columns=["Patient ID", "Sample ID"], inplace=True)

# Encode categorical variables
label_encoders = {}
categorical_cols = ["Disease Free Status", "Disease-specific Survival status", "Race Category", "Subtype", "Tumor Type"]

for col in categorical_cols:
    df[col] = df[col].astype(str)  # Ensure all values are strings before encoding
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

# Define target variable (Uterine Cancer Detection)
df["Cancer Type Detailed"] = df["Cancer Type Detailed"].astype(str)  # Ensure consistency
df["Cancer Type Detailed"] = df["Cancer Type Detailed"].apply(lambda x: 1 if "Uterine Corpus Endometrial Carcinoma" in x else 0)

# Define features and target
X = df.drop(columns=["Cancer Type Detailed"])
y = df["Cancer Type Detailed"]

# Convert all features to numeric to avoid string issues
X = X.apply(pd.to_numeric, errors='coerce')  # Convert any non-numeric values
X.fillna(0, inplace=True)  # Replace NaN values with 0 to ensure model stability

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Standardize numerical features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train the model (Random Forest)
model = RandomForestClassifier(n_estimators=200, max_depth=10, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy * 100:.2f}%")
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Save the model
import joblib
joblib.dump(model, "uterine_cancer_detection_model.pkl")
joblib.dump(scaler, "scaler.pkl")

print("Model2 and scaler saved successfully!")
